{"nbformat":4,"nbformat_minor":0,"metadata":{"accelerator":"TPU","colab":{"name":"Text-Gcn","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyMVE6Xf5EmYuEpTdw2XOToN"},"kernelspec":{"display_name":"Python 3","name":"python3"}},"cells":[{"cell_type":"code","metadata":{"id":"8uxbFvZ_eDQn","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1647043873917,"user_tz":360,"elapsed":17056,"user":{"displayName":"Khaled Saifuddin","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj2bTbFy6IGkt9EcfgA2kz0wTOlLTj78J8wQOP6=s64","userId":"17491546006244706959"}},"outputId":"ebcfd803-520c-4991-c2a0-f3b19fd38487"},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","metadata":{"id":"3olek4dUen-W"},"source":["!python drive/My\\ Drive/Colab\\ Notebooks/text_gcn-master/text_gcn-master/remove_words.py your_file"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"DPOtvsZeeyHH"},"source":["!python drive/My\\ Drive/Colab\\ Notebooks/text_gcn-master/text_gcn-master/build_graph.py your_file"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"4stc1bCALU4a"},"source":["!python drive/My\\ Drive/Colab\\ Notebooks/text_gcn-master/text_gcn-master/train.py your_file"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"-LrIPWwJHZ02"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"yrzlzHjVLVjA"},"source":["****************************************** GCN ***************************"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"M4pH05W9IzZJ","executionInfo":{"status":"ok","timestamp":1647044030115,"user_tz":360,"elapsed":1030,"user":{"displayName":"Khaled Saifuddin","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj2bTbFy6IGkt9EcfgA2kz0wTOlLTj78J8wQOP6=s64","userId":"17491546006244706959"}}},"source":["import sys\n","sys.path.append('drive/My Drive/Colab Notebooks/text_gcn-master/text_gcn-master/')\n","\n","dataset ='your_file'\n","import os\n","import random\n","import numpy as np\n","import pickle as pkl\n","import networkx as nx\n","import scipy.sparse as sp\n","from math import log\n","from sklearn import svm\n","from nltk.corpus import wordnet as wn\n","from sklearn.feature_extraction.text import TfidfVectorizer\n","from scipy.spatial.distance import cosine"],"execution_count":5,"outputs":[]},{"cell_type":"code","metadata":{"id":"yiy58ly67U7M","executionInfo":{"status":"ok","timestamp":1647044032545,"user_tz":360,"elapsed":110,"user":{"displayName":"Khaled Saifuddin","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj2bTbFy6IGkt9EcfgA2kz0wTOlLTj78J8wQOP6=s64","userId":"17491546006244706959"}}},"source":["word_embeddings_dim = 300\n","word_vector_map = {}\n","\n","# shulffing\n","doc_name_list = []\n","doc_train_list = []\n","doc_test_list = []\n","# print(doc_train_list)\n","# print(doc_test_list)\n","\n","doc_content_list = []\n","f = open('drive/My Drive/Colab Notebooks/text_gcn-master/text_gcn-master/data/corpus/' + dataset + '.clean.txt', 'r')\n","lines = f.readlines()\n","for line in lines:\n","    doc_content_list.append(line.strip())\n","f.close()\n","# print(doc_content_list)"],"execution_count":6,"outputs":[]},{"cell_type":"code","metadata":{"id":"TQ12-fAx9f9U"},"source":["doc_content_list"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"pI8k8iWdE4wC","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1647044294316,"user_tz":360,"elapsed":425,"user":{"displayName":"Khaled Saifuddin","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj2bTbFy6IGkt9EcfgA2kz0wTOlLTj78J8wQOP6=s64","userId":"17491546006244706959"}},"outputId":"aca3df1d-3224-4633-9b4b-141caf44cb85"},"source":["from sklearn.feature_extraction.text import TfidfVectorizer\n","vectorize= TfidfVectorizer()\n","\n","response= vectorize.fit_transform(doc_content_list)\n","\n","feature_names=vectorize.get_feature_names()\n","dense=response.todense()\n","denselist=dense.tolist()\n","\n","import pandas as pd\n","df = pd.DataFrame(denselist, columns=feature_names)\n","df=df.rename(columns={\"10\":\"a10\",\"100\":\"a100\",\"11\":\"a11\"})"],"execution_count":18,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function get_feature_names is deprecated; get_feature_names is deprecated in 1.0 and will be removed in 1.2. Please use get_feature_names_out instead.\n","  warnings.warn(msg, category=FutureWarning)\n"]}]},{"cell_type":"code","source":["len(denselist)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5YE2HJvvfM5F","executionInfo":{"status":"ok","timestamp":1647044387551,"user_tz":360,"elapsed":119,"user":{"displayName":"Khaled Saifuddin","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj2bTbFy6IGkt9EcfgA2kz0wTOlLTj78J8wQOP6=s64","userId":"17491546006244706959"}},"outputId":"ce0ebe22-a9f5-473f-e3eb-d7e2bd76d6ad"},"execution_count":21,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1500"]},"metadata":{},"execution_count":21}]},{"cell_type":"code","source":["df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"S9adKU8teY4n","executionInfo":{"status":"ok","timestamp":1647044295788,"user_tz":360,"elapsed":128,"user":{"displayName":"Khaled Saifuddin","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj2bTbFy6IGkt9EcfgA2kz0wTOlLTj78J8wQOP6=s64","userId":"17491546006244706959"}},"outputId":"3d68fcf6-f03d-41d5-c628-5c1a4399c765"},"execution_count":19,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      a10  a100  a11  12hour  abuse  abused  add  adderall  addict  addicted  \\\n","0     0.0   0.0  0.0     0.0    0.0     0.0  0.0       0.0     0.0       0.0   \n","1     0.0   0.0  0.0     0.0    0.0     0.0  0.0       0.0     0.0       0.0   \n","2     0.0   0.0  0.0     0.0    0.0     0.0  0.0       0.0     0.0       0.0   \n","3     0.0   0.0  0.0     0.0    0.0     0.0  0.0       0.0     0.0       0.0   \n","4     0.0   0.0  0.0     0.0    0.0     0.0  0.0       0.0     0.0       0.0   \n","...   ...   ...  ...     ...    ...     ...  ...       ...     ...       ...   \n","1495  0.0   0.0  0.0     0.0    0.0     0.0  0.0       0.0     0.0       0.0   \n","1496  0.0   0.0  0.0     0.0    0.0     0.0  0.0       0.0     0.0       0.0   \n","1497  0.0   0.0  0.0     0.0    0.0     0.0  0.0       0.0     0.0       0.0   \n","1498  0.0   0.0  0.0     0.0    0.0     0.0  0.0       0.0     0.0       0.0   \n","1499  0.0   0.0  0.0     0.0    0.0     0.0  0.0       0.0     0.0       0.0   \n","\n","      ...  yeah  year  years  yes  yesterday  yet  youll  youre  youtube  \\\n","0     ...   0.0   0.0    0.0  0.0        0.0  0.0    0.0    0.0      0.0   \n","1     ...   0.0   0.0    0.0  0.0        0.0  0.0    0.0    0.0      0.0   \n","2     ...   0.0   0.0    0.0  0.0        0.0  0.0    0.0    0.0      0.0   \n","3     ...   0.0   0.0    0.0  0.0        0.0  0.0    0.0    0.0      0.0   \n","4     ...   0.0   0.0    0.0  0.0        0.0  0.0    0.0    0.0      0.0   \n","...   ...   ...   ...    ...  ...        ...  ...    ...    ...      ...   \n","1495  ...   0.0   0.0    0.0  0.0        0.0  0.0    0.0    0.0      0.0   \n","1496  ...   0.0   0.0    0.0  0.0        0.0  0.0    0.0    0.0      0.0   \n","1497  ...   0.0   0.0    0.0  0.0        0.0  0.0    0.0    0.0      0.0   \n","1498  ...   0.0   0.0    0.0  0.0        0.0  0.0    0.0    0.0      0.0   \n","1499  ...   0.0   0.0    0.0  0.0        0.0  0.0    0.0    0.0      0.0   \n","\n","      zoloft  \n","0        0.0  \n","1        0.0  \n","2        0.0  \n","3        0.0  \n","4        0.0  \n","...      ...  \n","1495     0.0  \n","1496     0.0  \n","1497     0.0  \n","1498     0.0  \n","1499     0.0  \n","\n","[1500 rows x 487 columns]"],"text/html":["\n","  <div id=\"df-79f50d38-a28e-4324-b190-394c9a3c169f\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>a10</th>\n","      <th>a100</th>\n","      <th>a11</th>\n","      <th>12hour</th>\n","      <th>abuse</th>\n","      <th>abused</th>\n","      <th>add</th>\n","      <th>adderall</th>\n","      <th>addict</th>\n","      <th>addicted</th>\n","      <th>...</th>\n","      <th>yeah</th>\n","      <th>year</th>\n","      <th>years</th>\n","      <th>yes</th>\n","      <th>yesterday</th>\n","      <th>yet</th>\n","      <th>youll</th>\n","      <th>youre</th>\n","      <th>youtube</th>\n","      <th>zoloft</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>1495</th>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>1496</th>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>1497</th>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>1498</th>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>1499</th>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1500 rows × 487 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-79f50d38-a28e-4324-b190-394c9a3c169f')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-79f50d38-a28e-4324-b190-394c9a3c169f button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-79f50d38-a28e-4324-b190-394c9a3c169f');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":19}]},{"cell_type":"code","metadata":{"id":"JO2TA8Datxep","executionInfo":{"status":"ok","timestamp":1647044469835,"user_tz":360,"elapsed":325,"user":{"displayName":"Khaled Saifuddin","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj2bTbFy6IGkt9EcfgA2kz0wTOlLTj78J8wQOP6=s64","userId":"17491546006244706959"}}},"source":["cols = df.columns\n","bt = df.apply(lambda x: x > 0) #making df dataframe entry 'true' and 'false'\n","d=bt.apply(lambda x: list(cols[x.values]), axis=1) #return the distinct words of a node/tweet\n","\n","'''\n","here, below we are making edges between node/tweet with words out of 571 words\n","'''\n","building_edges=[]\n","for i in range (len(d)):\n","  for j in d[i]:\n","    building_edges.append((j,i))"],"execution_count":22,"outputs":[]},{"cell_type":"code","source":["building_edges"],"metadata":{"id":"ZsAW56sXgCpJ"},"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ha2g0J57Ypd_","executionInfo":{"status":"ok","timestamp":1647044675070,"user_tz":360,"elapsed":3003,"user":{"displayName":"Khaled Saifuddin","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj2bTbFy6IGkt9EcfgA2kz0wTOlLTj78J8wQOP6=s64","userId":"17491546006244706959"}}},"source":["'''\n","use building_edges to make a graph, this graph is actually a 'bipartite graph'\n","'''\n","B = nx.Graph()\n","B.add_edges_from(building_edges)\n","\n","'''\n","projected graph creation\n","'''\n","node=[i for i in range (0,1500)]\n","from networkx.algorithms import bipartite\n","G = bipartite.weighted_projected_graph(B, node) #'node' is here nodes to project on to (that means these nodes will connect each other to make 'G'"],"execution_count":25,"outputs":[]},{"cell_type":"code","source":["G.number_of_nodes()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"np42qRmZeiU3","executionInfo":{"status":"ok","timestamp":1647044130979,"user_tz":360,"elapsed":138,"user":{"displayName":"Khaled Saifuddin","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj2bTbFy6IGkt9EcfgA2kz0wTOlLTj78J8wQOP6=s64","userId":"17491546006244706959"}},"outputId":"755d9f54-13f4-4065-a10c-6ab5529d5c47"},"execution_count":13,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1500"]},"metadata":{},"execution_count":13}]},{"cell_type":"code","metadata":{"id":"sKkkoU4EKNpk","executionInfo":{"status":"ok","timestamp":1647044788285,"user_tz":360,"elapsed":520,"user":{"displayName":"Khaled Saifuddin","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj2bTbFy6IGkt9EcfgA2kz0wTOlLTj78J8wQOP6=s64","userId":"17491546006244706959"}}},"source":["M=nx.to_numpy_array(G)"],"execution_count":29,"outputs":[]},{"cell_type":"code","source":["M"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HmKFvwcfhQB0","executionInfo":{"status":"ok","timestamp":1647044791468,"user_tz":360,"elapsed":15,"user":{"displayName":"Khaled Saifuddin","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj2bTbFy6IGkt9EcfgA2kz0wTOlLTj78J8wQOP6=s64","userId":"17491546006244706959"}},"outputId":"43a920fb-90f5-4256-d4c5-df44e16280da"},"execution_count":30,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[0., 1., 1., ..., 0., 0., 0.],\n","       [1., 0., 1., ..., 0., 0., 0.],\n","       [1., 1., 0., ..., 0., 0., 0.],\n","       ...,\n","       [0., 0., 0., ..., 0., 0., 1.],\n","       [0., 0., 0., ..., 0., 0., 1.],\n","       [0., 0., 0., ..., 1., 1., 0.]])"]},"metadata":{},"execution_count":30}]},{"cell_type":"code","metadata":{"id":"IqPKHeE1MkuL","executionInfo":{"status":"ok","timestamp":1647044785926,"user_tz":360,"elapsed":1708,"user":{"displayName":"Khaled Saifuddin","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj2bTbFy6IGkt9EcfgA2kz0wTOlLTj78J8wQOP6=s64","userId":"17491546006244706959"}}},"source":["for i in range (len(M)):\n","  for j in range (len(M)):\n","    if M[i,j]!=M[j,i]:\n","      print('ok')"],"execution_count":28,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EfMPpXRVMMOQ","executionInfo":{"status":"ok","timestamp":1647044801531,"user_tz":360,"elapsed":144,"user":{"displayName":"Khaled Saifuddin","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj2bTbFy6IGkt9EcfgA2kz0wTOlLTj78J8wQOP6=s64","userId":"17491546006244706959"}},"outputId":"03868a05-f957-4191-8cda-6d7b58d4d2f9"},"source":["np.count_nonzero(M)"],"execution_count":31,"outputs":[{"output_type":"execute_result","data":{"text/plain":["508872"]},"metadata":{},"execution_count":31}]},{"cell_type":"code","metadata":{"id":"0_KwfwibNuRl"},"source":["input_1=M\n","with open(\"drive/My Drive/Colab Notebooks/text_gcn-master/text_gcn-master/my_edgelist.txt\", \"w\") as file_prime:\n","  for i in range (len(input_1)):\n","    for j in range (len(input_1)):\n","      if input_1[i,j] != 0:\n","        stra=str(i)\n","        strb=str(j)\n","        w=str(input_1[i,j])\n","        strc=stra+' '+strb+' '+w+'\\n'\n","        file_prime.write(strc)\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"921FnNr0ODGB"},"source":["#nx.write_edgelist(G, \"drive/My Drive/Colab Notebooks/text_gcn-master/text_gcn-master/my_edgelist.txt\",data=True)\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"LhAXhn0Icdpr"},"source":["'''adding weight for self loop'''\n","\n","with open('drive/My Drive/Colab Notebooks/text_gcn-master/text_gcn-master/my_edgelist.txt', 'a') as file:\n","    for i in range (1500):\n","      a=str(i)+' '+str(i)+' '+\"1.0\"+\"\\n\"\n","      file.write(a)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cAPydTbw3SvY","executionInfo":{"status":"ok","timestamp":1635413611115,"user_tz":300,"elapsed":41663,"user":{"displayName":"Khaled Saifuddin","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj2bTbFy6IGkt9EcfgA2kz0wTOlLTj78J8wQOP6=s64","userId":"17491546006244706959"}},"outputId":"04ad868e-66ec-4b43-8609-36e4bb2f07bf"},"source":["import numpy as np\n","\n","def load_glove_model(File):\n","    print(\"Loading Glove Model\")\n","    glove_model = {}\n","    with open(File,'r') as f:\n","        for line in f:\n","            split_line = line.split()\n","            word = split_line[0]\n","            embedding = np.array(split_line[1:], dtype=np.float64)\n","            glove_model[word] = embedding\n","    print(f\"{len(glove_model)} words loaded!\")\n","    return glove_model\n","embedding=load_glove_model('drive/My Drive/Colab Notebooks/TextING-master/glove.6B.300d.txt')    "],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Loading Glove Model\n","400000 words loaded!\n"]}]},{"cell_type":"code","metadata":{"id":"tYa2-deE46eB"},"source":["file1 = 'drive/My Drive/Colab Notebooks/ML_DL_for_DA/HLDataSet.tsv'\n","df1 = pd.read_csv(file1,sep=\"\\t\") #to take the label\n","\n","file2 = 'drive/My Drive/Colab Notebooks/ML_DL_for_DA/your_file.clean.txt'\n","df2 = pd.read_csv(file2,sep = \"\\t\") # to take the same cleaned text that we used in GNN"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Pps0epXf-4jt","executionInfo":{"status":"ok","timestamp":1635413616858,"user_tz":300,"elapsed":120,"user":{"displayName":"Khaled Saifuddin","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj2bTbFy6IGkt9EcfgA2kz0wTOlLTj78J8wQOP6=s64","userId":"17491546006244706959"}},"outputId":"a99f7189-c126-4cd1-c4ee-f8c821603716"},"source":["len(df2)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1500"]},"metadata":{},"execution_count":30}]},{"cell_type":"code","metadata":{"id":"dy2uFJr73W2l"},"source":["sentences = df2['Tweets']\n","def vectorizer (sent, m):\n","  vec =[]\n","  numw = 0\n","  for w in sent:\n","    try:\n","      if numw == 0:\n","        vec = m[w]\n","      else:  \n","        vec = np.add(vec, m[w])\n","      numw+=1\n","    except:\n","      pass\n","  return np.asarray(vec) / numw\n","\n","l=[]\n","for i in sentences :\n","  l.append (vectorizer(i, embedding))\n","X=np.array(l)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Sfr7wPx2krG0"},"source":["\"\"\"\n","preparing the one-hot encoding as a feature\n","nl=np.zeros((1500,1500))\n","for i in range (1500):\n","  for j in range (1500):\n","    if i==j:\n","      nl[i][j]=1\n","      break\n","\"\"\"\n","nl=X #when you don't want to use one-hot encoding rather want to use glove\n","shape = np.shape(nl)\n","padded_array1 = np.zeros((1500, 1500))\n","padded_array1[:shape[0],:shape[1]] = nl\n","nl=padded_array1\n","\n","'''\n","below is: when u want to use tf-idf score as a feature to the GCN (feature: X)\n","'''\n","nl1=df.to_numpy()\n","shape = np.shape(nl1)\n","padded_array2 = np.zeros((1500, 1500))\n","padded_array2[:shape[0],:shape[1]] = nl1"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"BB3JWKfufvtT"},"source":["nl1=padded_array2"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"4uv8SmYH90ee"},"source":["'''\n","adding the node_id as a first column with the feature matrix for the 'content.txt' file\n","'''\n","node=[i for i in range(1500)]\n","nl=np.insert(nl, 0, node, axis=1)\n","nl1=np.insert(nl1, 0, node, axis=1)\n","\n","'''\n","we also need to add the label column at the end in the content.txt file\n","'''\n","df_m=pd.read_csv(\"drive/My Drive/Colab Notebooks/text_gcn-master/text_gcn-master/members.csv\") #taking label column\n","label=df_m['real'].to_list()#taking label column"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"OnTmBU_39iBv"},"source":["nl=np.insert(nl, 300, label, axis=1) #putting label column at the end, one hot coding based feature matrix: X\n","nl1=np.insert(nl1, 1500, label, axis=1) #putting label column at the end, tf-idf based feature matrix X"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"wNZhuYCkmZdv"},"source":["np.savetxt('drive/My Drive/Colab Notebooks/text_gcn-master/text_gcn-master/content.txt', nl,newline=\"\\n\",fmt=\"%d\") # you may use 'nl1 ' "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tpwQTSnnBT3m","executionInfo":{"status":"ok","timestamp":1635413773437,"user_tz":300,"elapsed":897,"user":{"displayName":"Khaled Saifuddin","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj2bTbFy6IGkt9EcfgA2kz0wTOlLTj78J8wQOP6=s64","userId":"17491546006244706959"}},"outputId":"4372465e-ec40-4bea-96cf-faaed765dafa"},"source":["src=[]\n","dst=[]\n","weight1=[]\n","j=0\n","import re\n","with open(\"drive/My Drive/Colab Notebooks/text_gcn-master/text_gcn-master/my_edgelist.txt\") as fp:\n","        for i,line in enumerate (fp):\n","            info = line.strip().split()\n","            \n","            weight1.append(info[2])\n","            src.append(info[0])\n","            dst.append(info[1])\n","len(weight1)           "],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["510372"]},"metadata":{},"execution_count":40}]},{"cell_type":"code","metadata":{"id":"4VCDaw_AEF_h"},"source":["label=np.asarray(label, dtype=np.int64) #to use in the data prerpocessing\n","src=np.asarray(src, dtype=np.int64) #to use in the data prerpocessing\n","dst=np.asarray(dst, dtype=np.int64) #to use in the data prerpocessing\n","weight1=np.asanyarray(weight1, dtype=np.float32)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"8RT8FxPxLowl"},"source":["!pip install dgl"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"fm-3kRE7CsDs"},"source":["from sklearn.model_selection import ShuffleSplit\n","a_list = list(range(0, 1500))\n","X1 = np.array(a_list)\n","train=[]\n","test=[]\n","rs = ShuffleSplit(n_splits=1, train_size=0.67, test_size=0.33, random_state=0)\n","for train_index, test_index in rs.split(X1):\n","    train=list(train_index)\n","    test=list(test_index)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qzKM-NyoTpL2","executionInfo":{"status":"ok","timestamp":1635416436866,"user_tz":300,"elapsed":681,"user":{"displayName":"Khaled Saifuddin","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj2bTbFy6IGkt9EcfgA2kz0wTOlLTj78J8wQOP6=s64","userId":"17491546006244706959"}},"outputId":"8881c61f-c523-4d44-a675-f7da572b2e4f"},"source":["import dgl\n","import torch\n","from dgl.data import DGLDataset\n","import os\n","import torch.nn as nn\n","import torch.nn.functional as F\n","\n","class KarateClubDataset(DGLDataset):\n","    def __init__(self):\n","        super().__init__(name='karate_club')\n","\n","    def process(self):\n","        feat_data = np.zeros((1500, 1500))\n","        with open(\"drive/My Drive/Colab Notebooks/text_gcn-master/text_gcn-master/content.txt\") as fp:\n","            for i, line in enumerate (fp):\n","              info = line.strip().split()\n","              feat_data[i,:] = list(map(int, info[1:-1]))\n","        \n","        #nodes_data = pd.read_pickle('drive/My Drive/Colab Notebooks/text_gcn-master/text_gcn-master/members.csv')\n","        #edges_data = pd.read_csv('drive/My Drive/Colab Notebooks/text_gcn-master/text_gcn-master/interactions.csv')\n","      \n","        node_features = torch.from_numpy(feat_data).float()\n","        node_labels = torch.from_numpy(label)\n","        #print(label[0:10])\n","        edges_src = torch.from_numpy(src)\n","        edges_dst = torch.from_numpy(dst)\n","\n","        \n","        self.graph = dgl.graph((edges_src, edges_dst), num_nodes=1500)\n","        self.graph.ndata['feat'] = node_features\n","        self.graph.ndata['label'] = node_labels\n","          \n","\n","        n_nodes =1500\n","        n_train = 1005\n","        n_val = int(n_nodes * 0.2)\n","\n","        train_mask = torch.zeros(n_nodes, dtype=torch.bool)\n","        val_mask = torch.zeros(n_nodes, dtype=torch.bool)\n","        test_mask = torch.zeros(n_nodes, dtype=torch.bool)\n","        \n","        #train_mask[:n_train]=True\n","        #test_mask[n_train:]=True\n","\n","        \n","        for i in train:\n","          train_mask[i] = True\n","        for i in test:\n","          test_mask[i]=True\n","        \n","        val_mask[n_train:n_train + n_val] = True\n","        print((test_mask.shape))\n","        self.graph.ndata['train_mask'] = train_mask\n","        self.graph.ndata['val_mask'] = val_mask\n","        self.graph.ndata['test_mask'] = test_mask \n","        \n","    def __getitem__(self, i):\n","        return self.graph\n","\n","    def __len__(self):\n","        return 1\n","\n","dataset = KarateClubDataset()\n","graph = dataset[0]\n","\n","print(graph)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["torch.Size([1500])\n","Graph(num_nodes=1500, num_edges=510372,\n","      ndata_schemes={'feat': Scheme(shape=(1500,), dtype=torch.float32), 'label': Scheme(shape=(), dtype=torch.int64), 'train_mask': Scheme(shape=(), dtype=torch.bool), 'val_mask': Scheme(shape=(), dtype=torch.bool), 'test_mask': Scheme(shape=(), dtype=torch.bool)}\n","      edata_schemes={})\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Hr9iE8fznJ4g","executionInfo":{"status":"ok","timestamp":1635416439818,"user_tz":300,"elapsed":733,"user":{"displayName":"Khaled Saifuddin","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj2bTbFy6IGkt9EcfgA2kz0wTOlLTj78J8wQOP6=s64","userId":"17491546006244706959"}},"outputId":"96737098-034b-46e3-e2be-2f3db75f52d7"},"source":["dataset = KarateClubDataset()\n","g = dataset[0]\n","#g = dgl.add_self_loop(g)\n","\n","weight1_1=torch.from_numpy(weight1)\n","from dgl.nn import EdgeWeightNorm, GraphConv, GATConv,SAGEConv\n","edge_weight=weight1_1\n","norm = EdgeWeightNorm(norm='none')\n","norm_edge_weight = norm(g, edge_weight)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["torch.Size([1500])\n"]}]},{"cell_type":"code","metadata":{"id":"dAgjaHz2VeAI"},"source":["from dgl.nn import GraphConv\n","class GCN(nn.Module):\n","    def __init__(self, in_feats, h_feats, num_classes,edge_weight):\n","        super(GCN, self).__init__()\n","        self.conv1 = GraphConv(in_feats, h_feats,norm='both',weight=True,bias=True)\n","        self.conv2 = GraphConv(h_feats, h_feats,norm='both',weight=True,bias=True)\n","        #self.conv3 = GraphConv(h_feats, num_classes,norm='both',weight=True,bias=True)\n","        \n","\n","    def forward(self, g, in_feat,edge_weight=norm_edge_weight):\n","        h = self.conv1(g, in_feat, edge_weight=norm_edge_weight)\n","        h = F.relu(h)\n","        h = self.conv2(g, h, edge_weight=norm_edge_weight)\n","        h = F.relu(h)\n","        #h = self.conv3(g, h, edge_weight=norm_edge_weight)\n","        return h\n","\n","# Create the model with given dimensions\n","#model = GCN(g.ndata['feat'].shape[0], 20, 2,norm_edge_weight)\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"H2iWiRqUYBC0","executionInfo":{"status":"ok","timestamp":1635416612928,"user_tz":300,"elapsed":170322,"user":{"displayName":"Khaled Saifuddin","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj2bTbFy6IGkt9EcfgA2kz0wTOlLTj78J8wQOP6=s64","userId":"17491546006244706959"}},"outputId":"175b12bd-4566-41e4-ee7c-50c74eff1f33"},"source":["from sklearn.metrics import precision_recall_fscore_support\n","from sklearn.metrics import accuracy_score, classification_report\n","def train(g, model,norm_edge_weight):\n","    optimizer = torch.optim.Adam(model.parameters(), lr=0.02)\n","    best_val_acc = 0\n","    best_test_acc = 0\n","\n","    features = g.ndata['feat']\n","    labels = g.ndata['label']\n","    train_mask = g.ndata['train_mask']\n","    val_mask = g.ndata['val_mask']\n","    test_mask = g.ndata['test_mask']\n","    norm_edge_weight=norm_edge_weight\n","    \n","    for e in range(150):\n","        \n","        # Forward\n","        logits = model(g, features,norm_edge_weight)\n","       \n","        # Compute prediction\n","        pred = logits.argmax(1)\n","\n","        # Compute loss\n","        # Note that you should only compute the losses of the nodes in the training set.\n","        loss = F.cross_entropy(logits[train_mask], labels[train_mask])\n","\n","        # Compute accuracy on training/validation/test\n","        train_acc = (pred[train_mask] == labels[train_mask]).float().mean()\n","        val_acc = (pred[val_mask] == labels[val_mask]).float().mean()\n","        test_acc = (pred[test_mask] == labels[test_mask]).float().mean()\n","\n","        # Save the best validation accuracy and the corresponding test accuracy.\n","        if best_val_acc < val_acc:\n","            best_val_acc = val_acc\n","            best_test_acc = test_acc\n","\n","        # Backward\n","        optimizer.zero_grad()\n","        loss.backward()\n","        optimizer.step()\n","        \n","        if e % 5 == 0:\n","            print('In epoch {}, loss: {:.3f}, val acc: {:.3f} (best {:.3f}), test acc: {:.3f} (best {:.3f})'.format(\n","                e, loss, val_acc, best_val_acc, test_acc, best_test_acc))\n","        #print(labels[test_mask])\n","    #a=precision_recall_fscore_support(labels[test_mask], pred[test_mask], average='weighted')\n","    b= accuracy_score(labels[test_mask], pred[test_mask])\n","    print(format(b, '.4f'))\n","    #print(a)\n","    print(\"Matrix Classification Report: \")\n","    print(classification_report(labels[test_mask], pred[test_mask],digits=4))\n","model = GCN(g.ndata['feat'].shape[0], 300, 2,norm_edge_weight)\n","train(g, model,norm_edge_weight)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["In epoch 0, loss: 5.711, val acc: 0.000 (best 0.000), test acc: 0.000 (best 0.000)\n","In epoch 5, loss: 3.844, val acc: 0.103 (best 0.103), test acc: 0.248 (best 0.248)\n","In epoch 10, loss: 0.983, val acc: 0.897 (best 0.897), test acc: 0.752 (best 0.752)\n","In epoch 15, loss: 1.200, val acc: 0.897 (best 0.897), test acc: 0.752 (best 0.752)\n","In epoch 20, loss: 0.642, val acc: 0.897 (best 0.897), test acc: 0.752 (best 0.752)\n","In epoch 25, loss: 0.625, val acc: 0.897 (best 0.897), test acc: 0.752 (best 0.752)\n","In epoch 30, loss: 0.635, val acc: 0.897 (best 0.897), test acc: 0.752 (best 0.752)\n","In epoch 35, loss: 0.621, val acc: 0.897 (best 0.897), test acc: 0.752 (best 0.752)\n","In epoch 40, loss: 0.628, val acc: 0.897 (best 0.897), test acc: 0.752 (best 0.752)\n","In epoch 45, loss: 0.612, val acc: 0.897 (best 0.897), test acc: 0.752 (best 0.752)\n","In epoch 50, loss: 0.599, val acc: 0.897 (best 0.897), test acc: 0.752 (best 0.752)\n","In epoch 55, loss: 0.590, val acc: 0.897 (best 0.897), test acc: 0.752 (best 0.752)\n","In epoch 60, loss: 0.584, val acc: 0.897 (best 0.897), test acc: 0.752 (best 0.752)\n","In epoch 65, loss: 0.579, val acc: 0.897 (best 0.897), test acc: 0.752 (best 0.752)\n","In epoch 70, loss: 0.575, val acc: 0.897 (best 0.897), test acc: 0.752 (best 0.752)\n","In epoch 75, loss: 0.571, val acc: 0.897 (best 0.897), test acc: 0.752 (best 0.752)\n","In epoch 80, loss: 0.567, val acc: 0.897 (best 0.897), test acc: 0.752 (best 0.752)\n","In epoch 85, loss: 0.564, val acc: 0.897 (best 0.897), test acc: 0.752 (best 0.752)\n","In epoch 90, loss: 0.561, val acc: 0.897 (best 0.897), test acc: 0.752 (best 0.752)\n","In epoch 95, loss: 0.557, val acc: 0.897 (best 0.897), test acc: 0.752 (best 0.752)\n","In epoch 100, loss: 0.553, val acc: 0.897 (best 0.897), test acc: 0.752 (best 0.752)\n","In epoch 105, loss: 0.549, val acc: 0.897 (best 0.897), test acc: 0.752 (best 0.752)\n","In epoch 110, loss: 0.545, val acc: 0.897 (best 0.897), test acc: 0.758 (best 0.752)\n","In epoch 115, loss: 0.540, val acc: 0.897 (best 0.897), test acc: 0.776 (best 0.752)\n","In epoch 120, loss: 0.535, val acc: 0.897 (best 0.897), test acc: 0.794 (best 0.752)\n","In epoch 125, loss: 0.530, val acc: 0.897 (best 0.897), test acc: 0.804 (best 0.752)\n","In epoch 130, loss: 0.525, val acc: 0.897 (best 0.897), test acc: 0.810 (best 0.752)\n","In epoch 135, loss: 0.520, val acc: 0.897 (best 0.897), test acc: 0.812 (best 0.752)\n","In epoch 140, loss: 0.514, val acc: 0.897 (best 0.897), test acc: 0.812 (best 0.752)\n","In epoch 145, loss: 0.509, val acc: 0.897 (best 0.897), test acc: 0.808 (best 0.752)\n","0.8101\n","Matrix Classification Report: \n","              precision    recall  f1-score   support\n","\n","           0     0.8075    0.9812    0.8859       372\n","           1     0.8372    0.2927    0.4337       123\n","\n","    accuracy                         0.8101       495\n","   macro avg     0.8224    0.6369    0.6598       495\n","weighted avg     0.8149    0.8101    0.7736       495\n","\n"]}]},{"cell_type":"code","metadata":{"id":"egdxAXuKAN11"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":126},"id":"ARtBkU0WFneF","executionInfo":{"elapsed":12,"status":"error","timestamp":1630045271866,"user":{"displayName":"Khaled Saifuddin","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj2bTbFy6IGkt9EcfgA2kz0wTOlLTj78J8wQOP6=s64","userId":"17491546006244706959"},"user_tz":300},"outputId":"e00b78ec-6a70-42b9-d922-58a2c2c104c2"},"source":["********************************************************************************** Graph Sage *************************************************************************"],"execution_count":null,"outputs":[{"ename":"SyntaxError","evalue":"ignored","output_type":"error","traceback":["\u001b[0;36m  File \u001b[0;32m\"<ipython-input-32-1973c69c0125>\"\u001b[0;36m, line \u001b[0;32m1\u001b[0m\n\u001b[0;31m    ********************************************************************************** Graph Sage *************************************************************************\u001b[0m\n\u001b[0m     ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"]}]},{"cell_type":"code","metadata":{"id":"kHojB_K7qyAs"},"source":["\n","class GraphSage(nn.Module):\n","     def __init__(self,in_feats,out_feats,num_classes):\n","        super(GraphSage, self).__init__()\n","        self.Gconv1 = SAGEConv(in_feats, out_feats, 'gcn')\n","        self.Gconv2 = SAGEConv(out_feats, num_classes,'gcn')\n","     def forward(self, g, in_feats):\n","        h = self.Gconv1(g, in_feats)\n","        h = F.relu(h)\n","        h = self.Gconv2(g, h)\n","        return h\n","\n","# Create the model with given dimensions\n","model1 = GraphSage(g.ndata['feat'].shape[0], 16, 2)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":207},"id":"N5qwc9zKz4pm","executionInfo":{"elapsed":124,"status":"error","timestamp":1629691572157,"user":{"displayName":"Khaled Saifuddin","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj2bTbFy6IGkt9EcfgA2kz0wTOlLTj78J8wQOP6=s64","userId":"17491546006244706959"},"user_tz":300},"outputId":"fdeadb01-204d-4207-f25f-30b3c6be88e4"},"source":["def train(g, model1):\n","    optimizer = torch.optim.Adam(model1.parameters(), lr=0.01)\n","    best_val_acc = 0\n","    best_test_acc = 0\n","\n","    in_feats = g.ndata['feat']\n","    labels = g.ndata['label']\n","    train_mask = g.ndata['train_mask']\n","    val_mask = g.ndata['val_mask']\n","    test_mask = g.ndata['test_mask']\n","    \n","    for e in range(200):\n","        # Forward\n","        logits = model1(g, in_feats)\n","\n","        # Compute prediction\n","        pred = logits.argmax(1)\n","       \n","        # Compute loss\n","        # Note that you should only compute the losses of the nodes in the training set.\n","        loss = F.cross_entropy(logits[train_mask], labels[train_mask])\n","\n","        # Compute accuracy on training/validation/test\n","        train_acc = (pred[train_mask] == labels[train_mask]).float().mean()\n","        val_acc = (pred[val_mask] == labels[val_mask]).float().mean()\n","        test_acc = (pred[test_mask] == labels[test_mask]).float().mean()\n","\n","        # Save the best validation accuracy and the corresponding test accuracy.\n","        if best_val_acc < val_acc:\n","            best_val_acc = val_acc\n","            best_test_acc = test_acc\n","\n","        # Backward\n","        optimizer.zero_grad()\n","        loss.backward()\n","        optimizer.step()\n","\n","        if e % 5 == 0:\n","            print('In epoch {}, loss: {:.3f}, val acc: {:.3f} (best {:.3f}), test acc: {:.3f} (best {:.3f})'.format(\n","                e, loss, val_acc, best_val_acc, test_acc, best_test_acc))\n","model1 = GraphSage(g.ndata['feat'].shape[0], 16, 2)\n","train(g, model1)"],"execution_count":null,"outputs":[{"ename":"NameError","evalue":"ignored","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-277-6ddbac9a6178>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     39\u001b[0m             print('In epoch {}, loss: {:.3f}, val acc: {:.3f} (best {:.3f}), test acc: {:.3f} (best {:.3f})'.format(\n\u001b[1;32m     40\u001b[0m                 e, loss, val_acc, best_val_acc, test_acc, best_test_acc))\n\u001b[0;32m---> 41\u001b[0;31m \u001b[0mmodel1\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mGraphSage\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mg\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'feat'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m16\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     42\u001b[0m \u001b[0mtrain\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mg\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmodel1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'GraphSage' is not defined"]}]},{"cell_type":"code","metadata":{"id":"YCoKSwy03Uhp"},"source":[""],"execution_count":null,"outputs":[]}]}